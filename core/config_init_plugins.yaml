# This file is part of program code. It stores inital values for configuration
# of variables that are used by various plugins internally. It is not intended
# to be used as a user configuration file or a template thereof.

vinterp:
    # Smoothing of PALM terrain for WRF vertical interpolation to avoid sharp
    # horizontal gradients. Sigma value in grid points.
    terrain_smoothing: off

wrf:
    # Method of stretching vertical levels before vertical interpolation in
    # order to match the target (high-resolution) terrain, while limiting the
    # propagation of surface features to higher levels. May be one of:
    # universal:    A universal method where levels above transition_level are
    #               kept unmodified while the levels below are stretched
    #               gradually
    # hybrid:       Use the WRF hybrid vertical coordinate system from the
    #               WRFOUT input files to stretch the levels. WARNING: the WRF
    #               model must be configured to using hybrid levels, not sigma
    #               leves, there is no check for this!
    # sigma:        Use the WRF sigma levels system from the WRFOUT input
    #               files to stretch the levels. WARNING: the WRF model must be
    #               configured to using sigma levels, not hybrid leves, there
    #               is no check for this!
    vertical_stretching: universal
    transition_level: 2000.0 #m above origin_z

    radiation_smoothing_distance: 10000.0

    dimensions:
        Time:               time
        west_east:          x_meteo
        west_east_stag:     xu_meteo
        south_north:        y_meteo
        south_north_stag:   yv_meteo
        bottom_top:         z_meteo
        bottom_top_stag:    zw_meteo
        soil_layers_stag:   zsoil_meteo

    # horizontally interpolated variables (apart from U+V)
    hinterp_vars: [PH, PHB, HGT, T, W, TSLB, SMOIS, MU, MUB, P, PB, PSFC]

    # variables that compose specific humidity as a sum
    spechum_vars: [QVAPOR, QCLOUD, QRAIN, QICE, QSNOW, QGRAUP]

    # 1-d variables, direct copy
    vars_1d: [P_TOP, C3F, C4F, C3H, C4H, ZNW, ZNU]

# The CAMx configuration uses Python formulae, so it is obviously vulnerable to
# malicious configuration files. We assume that the users know what they are
# doing and they do not run arbitrary code from the internet.
camx:
    # Python-code checks on input file variables and attributes. May also be
    # extended by individual output variables.
    validations: []

    # A list of variables loaded for processing. May also be extended by
    # individual output variables.
    loaded_vars: []

    # An optional preprocessing Python code on loaded variables, as triggered
    # by individual output variables.
    preprocessors:
        PM25: 'PM25 = PSO4+PNO3+PNH4+POA+PEC+FPRM+SOA1+SOA2+SOA3+SOA4+SOPA+SOPB'
        'NOX': 'NOX = NO+NO2+N03+N2O5'

    # Output variable definitions with units and Python formulae on loaded
    # variables, which may optionally trigger specific preprocessors and/or
    # validations.
    output_var_defs:
        'NO': #NO without quotes means False in yaml!
            formula: 'NO'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'ppm'
            loaded_vars: ['NO']
            validations:
                - '_units.NO == "ppmv"'
            preprocessors: []
        NO2:
            formula: 'NO2'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'ppm'
            loaded_vars: [NO2]
            validations:
                - '_units.NO2 == "ppmv"'
            preprocessors: []
        'NO3':
            formula: 'NO3'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'ppm'
            loaded_vars: [ NO3 ]
            validations:
                - '_units.NO3 == "ppmv"'
            preprocessors: [ ]
        N2O5:
            formula: 'N2O5'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'ppm'
            loaded_vars: [ N2O5 ]
            validations:
                - '_units.N2O5 == "ppmv"'
            preprocessors: [ ]
        'NOX':
            formula: 'NO+NO2+N03+N2O5'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'ppm'
            loaded_vars: ['NO', 'NO2', 'NOX', 'N2O5']
            validations:
                - '_units.NO == "ppmv"'
                - '_units.NO2 == "ppmv"'
                - '_units.NO3 == "ppmv"'
                - '_units.N2O5 == "ppmv"'
            preprocessors: ['NOX']
        O3:
            formula: 'O3'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'ppm'
            loaded_vars: [O3]
            validations:
                - '_units.O3 == "ppmv"'
            preprocessors: []
        PM10:
            formula: '(CPRM+PM25)*1e-9'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'kg/m3'
            loaded_vars: [PSO4, PNO3, PNH4, POA, PEC, FPRM, SOA1, SOA2, SOA3,
                SOA4, SOPA, SOPB, CPRM]
            validations:
                - '_units.PSO4 == "micrograms m-3"'
                - '_units.PNO3 == "micrograms m-3"'
                - '_units.PNH4 == "micrograms m-3"'
                - '_units.POA == "micrograms m-3"'
                - '_units.PEC == "micrograms m-3"'
                - '_units.FPRM == "micrograms m-3"'
                - '_units.SOA1 == "micrograms m-3"'
                - '_units.SOA2 == "micrograms m-3"'
                - '_units.SOA3 == "micrograms m-3"'
                - '_units.SOA4 == "micrograms m-3"'
                - '_units.SOPA == "micrograms m-3"'
                - '_units.SOPB == "micrograms m-3"'
                - '_units.CPRM == "micrograms m-3"'
            preprocessors: [PM25]
        PM25:
            formula: 'PM25*1e-9'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'kg/m3'
            loaded_vars: [PSO4, PNO3, PNH4, POA, PEC, FPRM, SOA1, SOA2, SOA3,
                SOA4, SOPA, SOPB]
            validations:
                - '_units.PSO4 == "micrograms m-3"'
                - '_units.PNO3 == "micrograms m-3"'
                - '_units.PNH4 == "micrograms m-3"'
                - '_units.POA == "micrograms m-3"'
                - '_units.PEC == "micrograms m-3"'
                - '_units.FPRM == "micrograms m-3"'
                - '_units.SOA1 == "micrograms m-3"'
                - '_units.SOA2 == "micrograms m-3"'
                - '_units.SOA3 == "micrograms m-3"'
                - '_units.SOA4 == "micrograms m-3"'
                - '_units.SOPA == "micrograms m-3"'
                - '_units.SOPB == "micrograms m-3"'
            preprocessors: [PM25]
        
        HONO:
            formula: 'HONO'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'ppm'
            loaded_vars: [ HONO ]
            validations:
                - '_units.HONO == "ppmv"'
            preprocessors: [ ]
        
        HNO3:
            formula: 'HNO3'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'ppm'
            loaded_vars: [ HNO3 ]
            validations:
                - '_units.HNO3 == "ppmv"'
            preprocessors: [ ]
            
        PNA:
            formula: 'PNA'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'ppm'
            loaded_vars: [ PNA ]
            validations:
                - '_units.PNA == "ppmv"'
            preprocessors: [ ]

            
        O1D:
            formula: 'O1D*1e-9'
            unit: 'ppm'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 16.0E-3 # kg/m3
            loaded_vars: [ O1D ]
            validations:
                - '_units.O1D == "micrograms m-3"'
            preprocessors: [ ]

            
        O:
            formula: 'O*1e-9'
            unit: 'ppm'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 16.0E-3 # kg/m3
            loaded_vars: [ O ]
            validations:
                - '_units.O == "micrograms m-3"'
            preprocessors: [ ]

            
        OH:
            formula: 'OH*1e-9'
            unit: 'ppm'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 17.0E-3 # kg/m3
            loaded_vars: [ OH ]
            validations:
                - '_units.OH == "micrograms m-3"'
            preprocessors: [ ]
            
        HO:
            formula: 'HO*1e-9'
            unit: 'ppm'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 17.01E-3 # kg/m3
            loaded_vars: [ HO ]
            validations:
                - '_units.HO == "micrograms m-3"'
            preprocessors: [ ]

            
        HO2:
            formula: 'HO2*1e-9'
            unit: 'ppm'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 33.01E-3 # kg/m3
            loaded_vars: [ HO2 ]
            validations:
                - '_units.HO2 == "micrograms m-3"'
            preprocessors: [ ]

            
        H2O2:
            formula: 'H2O2'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ H2O2 ]
            validations:
                - '_units.H2O2 == "ppmv"'
            preprocessors: [ ]

        # MB
        HCHO:
            formula: 'FORM'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ FORM ]
            validations:
                - '_units.FORM == "ppmv"'
            preprocessors: [ ]
            
        ALD2:
            formula: 'ALDX'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ ALDX ]
            validations:
                - '_units.ALDX == "ppmv"'
            preprocessors: [ ]

            
        C2O3:
            formula: 'C2O3*1e-9'
            unit: 'ppm'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 65.03E-3 # kg/m3
            loaded_vars: [ C2O3 ]
            validations:
                - '_units.C2O3 == "micrograms m-3"'
            preprocessors: [ ]
    
        PAN:
            formula: 'PAN'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ PAN ]
            validations:
                - '_units.PAN == "ppmv"'
            preprocessors: [ ]

        PAR:
            formula: 'PAR'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ PAR ]
            validations:
                - '_units.PAR == "ppmv"'
            preprocessors: [ ]
         
         # MB
#        ROR:
#            formula: 'ROR*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ ROR ]
#            validations:
#                - '_units.ROR == "micrograms m-3"'
#            preprocessors: [ ]
        
        OLE:
            formula: 'OLE'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ OLE ]
            validations:
                - '_units.OLE == "ppmv"'
            preprocessors: [ ]
            
        ETH:
            formula: 'ETH'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ ETH ]
            validations:
                - '_units.ETH == "ppmv"'
            preprocessors: [ ]
            
        TOL:
            formula: 'TOL'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ TOL ]
            validations:
                - '_units.TOL == "ppmv"'
            preprocessors: [ ]
            
        CRES:
            formula: 'CRES'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ CRES ]
            validations:
                - '_units.CRES == "ppmv"'
            preprocessors: [ ]
            
        'XYL':
            formula: 'XYL'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ XYL ]
            validations:
                - '_units.PAN == "ppmv"'
            preprocessors: [ ]
            
        MGLY:
            formula: 'MGLY'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ MGLY ]
            validations:
                - '_units.MGLY == "ppmv"'
            preprocessors: [ ]
            
        ISOP:
            formula: 'ISOP'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ ISOP ]
            validations:
                - '_units.ISOP == "ppmv"'
            preprocessors: [ ]
            
         # MB
#        XO2:
#            formula: 'XO2*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ XO2 ]
#            validations:
#                - '_units.XO2 == "micrograms m-3"'
#            preprocessors: [ ]
#
#        XO2N:
#            formula: 'XO2N*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ XO2N ]
#            validations:
#                - '_units.XO2N == "micrograms m-3"'
#            preprocessors: [ ]
        
        CO:
            formula: 'CO'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ CO ]
            validations:
                - '_units.CO == "ppmv"'
            preprocessors: [ ]
            
        XOPN:
            formula: 'XOPN'
            unit: 'ppm'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            loaded_vars: [ XOPN ]
            validations:
                - '_units.XOPN == "ppmv"'
            preprocessors: [ ]
            
        PH2O:
            formula: 'PH2O*1e-9'
            unit: 'ppm'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 18.02E-3 # kg/m3
            loaded_vars: [ PH2O ]
            validations:
                - '_units.PH2O == "micrograms m-3"'
            preprocessors: [ ]
            
        PSO4:
            formula: 'PSO4*1e-9'
            unit: 'ppm'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 96.06E-3 # kg/m3
            loaded_vars: [ PSO4 ]
            validations:
                - '_units.PSO4 == "micrograms m-3"'
            preprocessors: [ ]
            
        PNO3:
            formula: 'PNO3*1e-9'
            unit: 'ppm'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 62.0E-3 # kg/m3
            loaded_vars: [ PNO3 ]
            validations:
                - '_units.PNO3 == "micrograms m-3"'
            preprocessors: [ ]
            
        PNH4:
            formula: 'PNH4*1e-9'
            unit: 'ppm'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 18.04E-3 # kg/m3
            loaded_vars: [ PNH4 ]
            validations:
                - '_units.PNH4 == "micrograms m-3"'
            preprocessors: [ ]
            
        NA:
            formula: 'NA*1e-9'
            unit: 'ppm'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 79.01E-3 # kg/m3
            loaded_vars: [ NA ]
            validations:
                - '_units.NA == "micrograms m-3"'
            preprocessors: [ ]
            
#        PCL:
#            formula: 'PCL*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ PCL ]
#            validations:
#                - '_units.PCL == "micrograms m-3"'
#            preprocessors: [ ]

#        PEC:
#            formula: 'PEC*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ PEC ]
#            validations:
#                - '_units.PEC == "micrograms m-3"'
#            preprocessors: [ ]

#        FPRM:
#            formula: 'FPRM*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ FPRM ]
#            validations:
#                - '_units.FPRM == "micrograms m-3"'
#            preprocessors: [ ]

#        FCRS:
#            formula: 'FCRS*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ FCRS ]
#            validations:
#                - '_units.FCRS == "micrograms m-3"'
#            preprocessors: [ ]

#        CPRM:
#            formula: 'CPRM*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ CPRM ]
#            validations:
#                - '_units.CPRM == "micrograms m-3"'
#            preprocessors: [ ]

#        CCRS:
#            formula: 'CCRS*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ CCRS ]
#            validations:
#                - '_units.CCRS == "micrograms m-3"'
#            preprocessors: [ ]

#        POA:
#            formula: 'POA*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ POA ]
#            validations:
#                - '_units.POA == "micrograms m-3"'
#            preprocessors: [ ]

#        SOA1:
#            formula: 'SOA1*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ SOA1 ]
#            validations:
#                - '_units.SOA1 == "micrograms m-3"'
#            preprocessors: [ ]
#
#        SOA2:
#            formula: 'SOA2*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ SOA2 ]
#            validations:
#                - '_units.SOA2 == "micrograms m-3"'
#            preprocessors: [ ]
#
#        SOPA:
#            formula: 'SOPA*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ SOPA ]
#            validations:
#                - '_units.SOPA == "micrograms m-3"'
#            preprocessors: [ ]
#
#        SOA3:
#            formula: 'SOA3*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ SOA3 ]
#            validations:
#                - '_units.SOA3 == "micrograms m-3"'
#            preprocessors: [ ]
#
#        SOA4:
#            formula: 'SOA4*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ SOA4 ]
#            validations:
#                - '_units.SOA4 == "micrograms m-3"'
#            preprocessors: [ ]
#
#        SOPB:
#            formula: 'SOPB*1e-9'
#            unit: 'ppm'
#            convert: True        # do conversion from kg/m3 to ppm
#            molar_mass: 46.01E-3 # kg/m3
#            loaded_vars: [ SOPB ]
#            validations:
#                - '_units.SOPB == "micrograms m-3"'
#            preprocessors: [ ]
    
    
    # missing
    #    H2O

synthetic:
    transition_level: 2000.0 #m above origin_z

    prof_vars:
        u: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        v: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        w: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        pt: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        qv: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        soil_t: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        soil_m: {profiles: ~, heights: ~, timeseries: ~, times: ~}

    p_surf: ~
    p_sl: 100000.

srid_palm: 32633
srid_wgs84: 4326
aladin:
    load_gribs: true
    vertical_stretching: universal
    transition_level: 2000.0 #m above origin_z

    radiation_smoothing_distance: 10000.0

    soil_depth_default: 0.40
    soil_avg_point: [ 14.418540, 50.073658 ]

    dimensions:
        time: time
        x: x_meteo
        xs: xu_meteo
        y: y_meteo
        ys: yv_meteo
        z: z_meteo
        zs: zw_meteo
        soil_layers_stag: zsoil_meteo
    
    # horizontally interpolated variables (apart from U+V)
    hinterp_vars: [ W, T, PH, P, PSFC, TSLB, SMOIS, SMOIS1 ]
    
    # variables that compose specific humidity as a sum
    spechum_vars: [ Q ]
    
    # FIXME: how to deal with pressure on the ground: level 0
    
    # 1-d variables, direct copy
    vars_1d: [ ]

icon2:
    # List of assimilation cycles specified as timedeltas after midnight UTC
    input_assim_cycles: [0 h, 3 h, 6 h, 9 h, 12 h, 15 h, 18 h, 21 h]

    # First and last forecast horizon taken from each cycle. Must match
    # assimilation cycles in such a way that a full, continuous day is formed.
    # For aggregated values, the last horizon is exactly 1 timestep further.
    input_fcst_horizon_range: [0 h, 2 h]

    interpolation_buffer: 20.0 #km
    radiation_smoothing_distance: 30.0 #km

    transition_level: 2000.0 #m above origin_z

    vars_2d: [PS]
    vars_3d: [P, T, U, V, QV]
    vars_3dw: [W] #HHL is special
    vars_soil: [T_SO, QSOIL]

    # Smoothing of PALM terrain for vertical interpolation to avoid sharp
    # horizontal gradients. Sigma value in grid points.
    terrain_smoothing: off


cams:
    validations: [ ]
    
    loaded_vars: [ ]
    
    preprocessors:
    
    output_var_defs:
        'NO': #NO without quotes means False in yaml!
            formula: 'no_conc*1e-9'   # convert to kg/m3
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 30.01E-3 # kg/m3
            unit: 'ppm'
            loaded_vars: [ 'no_conc' ]
            validations:
                - '_units.no_conc == "µg/m3"'
            preprocessors: [ ]
        NO2:
            formula: 'no2_conc*1e-9'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 46.01E-3 # kg/m3
            unit: 'ppm'
            loaded_vars: [no2_conc]
            validations:
                - '_units.no2_conc == "µg/m3"'
            preprocessors: []
        NOX:
            formula: 'no_conc*1e-9+no2_conc*1e-9'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 30.01E-3 # kg/m3
            unit: 'ppm'
            loaded_vars: [no_conc, no2_conc]
            validations:
                - '_units.no_conc == "µg/m3"'
                - '_units.no2_conc == "µg/m3"'
            preprocessors: []
        O3:
            formula: 'o3_conc*1e-9'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 48.00E-3 # kg/m3
            unit: 'ppm'
            loaded_vars: [o3_conc]
            validations:
                - '_units.o3_conc == "µg/m3"'
            preprocessors: []
        PM10:
            formula: 'pm10_conc*1e-9'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'kg/m3'
            loaded_vars: [pm10_conc]
            validations:
                - '_units.pm10_conc == "µg/m3"'
            preprocessors: []
        PM25:
            formula: 'pm2p5_conc*1e-9'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'kg/m3'
            loaded_vars: [pm2p5_conc]
            validations:
                - '_units.pm2p5_conc == "µg/m3"'
            preprocessors: []