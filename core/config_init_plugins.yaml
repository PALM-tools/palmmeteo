# Copyright 2018-2024 Institute of Computer Science of the Czech Academy of
# Sciences, Prague, Czech Republic. Authors: Pavel Krc, Martin Bures, Jaroslav
# Resler.
#
# This file is part of PALM-METEO.
#
# PALM-METEO is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# PALM-METEO is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# PALM-METEO. If not, see <https://www.gnu.org/licenses/>.


# This file is part of program code. It stores inital values for configuration
# of variables that are used by various plugins internally. It is not intended
# to be used as a user configuration file or a template thereof.

vinterp:
    # Smoothing of PALM terrain for WRF vertical interpolation to avoid sharp
    # horizontal gradients. Sigma value in grid points.
    terrain_smoothing: off

wrf:
    # Method of stretching vertical levels before vertical interpolation in
    # order to match the target (high-resolution) terrain, while limiting the
    # propagation of surface features to higher levels. May be one of:
    # universal:    A universal method where levels above transition_level are
    #               kept unmodified while the levels below are stretched
    #               gradually
    # hybrid:       Use the WRF hybrid vertical coordinate system from the
    #               WRFOUT input files to stretch the levels. WARNING: the WRF
    #               model must be configured to using hybrid levels, not sigma
    #               leves, there is no check for this!
    # sigma:        Use the WRF sigma levels system from the WRFOUT input
    #               files to stretch the levels. WARNING: the WRF model must be
    #               configured to using sigma levels, not hybrid leves, there
    #               is no check for this!
    vertical_stretching: universal
    transition_level: 2000.0 #m above origin_z

    radiation_smoothing_distance: 10000.0

    dimensions:
        Time:               time
        west_east:          x_meteo
        west_east_stag:     xu_meteo
        south_north:        y_meteo
        south_north_stag:   yv_meteo
        bottom_top:         z_meteo
        bottom_top_stag:    zw_meteo
        soil_layers_stag:   zsoil_meteo

    # horizontally interpolated variables (apart from U+V)
    hinterp_vars: [PH, PHB, HGT, T, W, TSLB, SMOIS, MU, MUB, P, PB, PSFC]

    # variables that compose specific humidity as a sum
    spechum_vars: [QVAPOR, QCLOUD, QRAIN, QICE, QSNOW, QGRAUP]

    # 1-d variables, direct copy
    vars_1d: [P_TOP, C3F, C4F, C3H, C4H, ZNW, ZNU]

# The CAMx configuration uses Python formulae, so it is obviously vulnerable to
# malicious configuration files. We assume that the users know what they are
# doing and they do not run arbitrary code from the internet.
camx:
    # Python-code checks on input file variables and attributes. May also be
    # extended by individual output variables.
    validations: []

    # A list of variables loaded for processing. May also be extended by
    # individual output variables.
    loaded_vars: []

    # An optional preprocessing Python code on loaded variables, as triggered
    # by individual output variables.
    preprocessors:
        PM25: 'PM25 = PSO4+PNO3+PNH4+POA+PEC+FPRM+SOA1+SOA2+SOA3+SOA4+SOPA+SOPB'

    # Output variable definitions with units and Python formulae on loaded
    # variables, which may optionally trigger specific preprocessors and/or
    # validations.
    output_var_defs:
        'NO': #NO without quotes means False in yaml!
            formula: 'NO'
            unit: 'ppm'
            loaded_vars: ['NO']
            validations:
                - '_units.NO == "ppmv"'
            preprocessors: []
        NO2:
            formula: 'NO2'
            unit: 'ppm'
            loaded_vars: [NO2]
            validations:
                - '_units.NO2 == "ppmv"'
            preprocessors: []
        NOX:
            formula: 'NO+NO2'
            unit: 'ppm'
            loaded_vars: ['NO', NO2]
            validations:
                - '_units.NO == "ppmv"'
                - '_units.NO2 == "ppmv"'
            preprocessors: []
        O3:
            formula: 'O3'
            unit: 'ppm'
            loaded_vars: [O3]
            validations:
                - '_units.O3 == "ppmv"'
            preprocessors: []
        PM10:
            formula: '(CPRM+PM25)*1e-9'
            unit: 'kg/m3'
            loaded_vars: [PSO4, PNO3, PNH4, POA, PEC, FPRM, SOA1, SOA2, SOA3,
                SOA4, SOPA, SOPB, CPRM]
            validations:
                - '_units.PSO4 == "micrograms m-3"'
                - '_units.PNO3 == "micrograms m-3"'
                - '_units.PNH4 == "micrograms m-3"'
                - '_units.POA == "micrograms m-3"'
                - '_units.PEC == "micrograms m-3"'
                - '_units.FPRM == "micrograms m-3"'
                - '_units.SOA1 == "micrograms m-3"'
                - '_units.SOA2 == "micrograms m-3"'
                - '_units.SOA3 == "micrograms m-3"'
                - '_units.SOA4 == "micrograms m-3"'
                - '_units.SOPA == "micrograms m-3"'
                - '_units.SOPB == "micrograms m-3"'
                - '_units.CPRM == "micrograms m-3"'
            preprocessors: [PM25]
        PM25:
            formula: 'PM25*1e-9'
            unit: 'kg/m3'
            loaded_vars: [PSO4, PNO3, PNH4, POA, PEC, FPRM, SOA1, SOA2, SOA3,
                SOA4, SOPA, SOPB]
            validations:
                - '_units.PSO4 == "micrograms m-3"'
                - '_units.PNO3 == "micrograms m-3"'
                - '_units.PNH4 == "micrograms m-3"'
                - '_units.POA == "micrograms m-3"'
                - '_units.PEC == "micrograms m-3"'
                - '_units.FPRM == "micrograms m-3"'
                - '_units.SOA1 == "micrograms m-3"'
                - '_units.SOA2 == "micrograms m-3"'
                - '_units.SOA3 == "micrograms m-3"'
                - '_units.SOA4 == "micrograms m-3"'
                - '_units.SOPA == "micrograms m-3"'
                - '_units.SOPB == "micrograms m-3"'
            preprocessors: [PM25]

synthetic:
    transition_level: 2000.0 #m above origin_z

    prof_vars:
        u: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        v: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        w: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        pt: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        qv: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        soil_t: {profiles: ~, heights: ~, timeseries: ~, times: ~}
        soil_m: {profiles: ~, heights: ~, timeseries: ~, times: ~}

    p_surf: ~
    p_sl: 100000.

srid_palm: 32633
srid_wgs84: 4326
aladin:
    load_gribs: true
    vertical_stretching: universal
    transition_level: 2000.0 #m above origin_z

    radiation_smoothing_distance: 10000.0

    soil_depth_default: 0.40
    soil_avg_point: [ 14.418540, 50.073658 ]

    dimensions:
        time: time
        x: x_meteo
        xs: xu_meteo
        y: y_meteo
        ys: yv_meteo
        z: z_meteo
        zs: zw_meteo
        soil_layers_stag: zsoil_meteo
    
    # horizontally interpolated variables (apart from U+V)
    hinterp_vars: [ W, T, PH, P, PSFC, TSLB, SMOIS, SMOIS1 ]
    
    # variables that compose specific humidity as a sum
    spechum_vars: [ Q ]
    
    # FIXME: how to deal with pressure on the ground: level 0
    
    # 1-d variables, direct copy
    vars_1d: [ ]

icon2:
    # List of assimilation cycles specified as timedeltas after midnight UTC
    input_assim_cycles: [0 h, 3 h, 6 h, 9 h, 12 h, 15 h, 18 h, 21 h]

    # First and last forecast horizon taken from each cycle. Must match
    # assimilation cycles in such a way that a full, continuous day is formed.
    # For aggregated values, the last horizon is exactly 1 timestep further.
    input_fcst_horizon_range: [0 h, 2 h]

    interpolation_buffer: 20.0 #km
    radiation_smoothing_distance: 30.0 #km

    transition_level: 2000.0 #m above origin_z

    vars_2d: [PS]
    vars_3d: [P, T, U, V, QV]
    vars_3dw: [W] #HHL is special
    vars_soil: [T_SO, QSOIL]

    # Smoothing of PALM terrain for vertical interpolation to avoid sharp
    # horizontal gradients. Sigma value in grid points.
    terrain_smoothing: off


cams:
    validations: [ ]
    
    loaded_vars: [ ]
    
    preprocessors:
    
    output_var_defs:
        'NO': #NO without quotes means False in yaml!
            formula: 'no_conc*1e-9'   # convert to kg/m3
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 30.01E-3 # kg/m3
            unit: 'ppm'
            loaded_vars: [ 'no_conc' ]
            validations:
                - '_units.no_conc == "µg/m3"'
            preprocessors: [ ]
        NO2:
            formula: 'no2_conc*1e-9'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 46.01E-3 # kg/m3
            unit: 'ppm'
            loaded_vars: [no2_conc]
            validations:
                - '_units.no2_conc == "µg/m3"'
            preprocessors: []
        NOX:
            formula: 'no_conc*1e-9+no2_conc*1e-9'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 30.01E-3 # kg/m3
            unit: 'ppm'
            loaded_vars: [no_conc, no2_conc]
            validations:
                - '_units.no_conc == "µg/m3"'
                - '_units.no2_conc == "µg/m3"'
            preprocessors: []
        O3:
            formula: 'o3_conc*1e-9'
            convert: True        # do conversion from kg/m3 to ppm
            molar_mass: 48.00E-3 # kg/m3
            unit: 'ppm'
            loaded_vars: [o3_conc]
            validations:
                - '_units.o3_conc == "µg/m3"'
            preprocessors: []
        PM10:
            formula: 'pm10_conc*1e-9'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'kg/m3'
            loaded_vars: [pm10_conc]
            validations:
                - '_units.pm10_conc == "µg/m3"'
            preprocessors: []
        PM25:
            formula: 'pm2p5_conc*1e-9'
            convert: False       # do conversion from kg/m3 to ppm
            molar_mass: 0.0      # kg/m3
            unit: 'kg/m3'
            loaded_vars: [pm2p5_conc]
            validations:
                - '_units.pm2p5_conc == "µg/m3"'
            preprocessors: []
